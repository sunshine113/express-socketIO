#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-socket:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// app.use('/',express.static(__dirname + '/www'));

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var count =0;
var io = require('socket.io').listen(server)
var nicknames = [];

io.sockets.on('connection',function(socket){
    count++;
    console.log('User connected' + count + 'user(s) present');
    socket.emit('users',{number:count});
    socket.broadcast.emit('users',{number:count});

  /*  socket.on('message',function(data){
        socket.broadcast.emit('push message',data);

    });*/

    socket.on('nickname',function (data,fn) {
        /*if(nicknames.indexOf(data)!=-1){
            fn(true);
        }else {
            fn(false);
            nicknames.push(data);
            socket.nickname = data;
            io.socket.emit('nicknames',nicknames);

        }*/
        console.log(data)
        nicknames.push(data);
        socket.nickname = data;
        // socket.broadcast.emit('nicknames',nicknames);
    });

    socket.on('message',function(data){
        console.log(socket.nickname)
        var name = socket.nickname
        var obj = {
            nick: name,
            message: data
        }
            socket.broadcast.emit('user message',obj);
    })

    socket.on('disconnect',function(){
        count--;
        console.log('User disconnected');
        socket.broadcast.emit('users',{number:count});
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
